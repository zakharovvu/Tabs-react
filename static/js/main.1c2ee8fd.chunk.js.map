{"version":3,"sources":["Tabs.js","Tab.js","App.js","serviceWorker.js","index.js"],"names":["Tabs","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","arrTabs","children","map","el","state","value","taba","tab","title","val","_this2","find","setState","console","log","_this3","react_default","a","createElement","className","index","key","onClick","viwer","React","Component","Tab","App","src_Tabs","src_Tab","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NA8CeA,cA3Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACN,IAAMQ,EAAUR,EAAMS,SAASC,IAAI,SAAAC,GAAE,OAAIA,EAAGX,QAF3B,OAIjBC,EAAKW,MAAQ,CACXC,MAAOL,EACPM,KAAMN,EAAQ,GAAGC,SACjBM,IAAKP,EAAQ,GAAGQ,OAPDf,qEAWbgB,GAAK,IAAAC,EAAAd,KACLW,EAAMX,KAAKQ,MAAMC,MAAMM,KAAK,SAAAJ,GAAG,OAAIA,EAAIC,QAAUC,IACrDb,KAAKgB,SAAS,CAAEN,KAAMC,EAAIN,SAAUM,IAAKE,GACzC,kBAAMI,QAAQC,IAAIL,EAAKC,EAAKN,MAAME,yCAG3B,IAAAS,EAAAnB,KACP,OACEoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZvB,KAAKQ,MAAMC,MAAMH,IAAI,SAACC,EAAIiB,GACzB,OACEJ,EAAAC,EAAAC,cAAA,OACEC,UACEJ,EAAKX,MAAMC,MAAMe,GAAOZ,QAAUO,EAAKX,MAAMG,IACzC,UACA,MAENc,IAAKD,EACLE,QAAS,kBAAMP,EAAKQ,MAAMR,EAAKX,MAAMC,MAAMe,GAAOZ,SAEjDL,EAAGK,UAKZQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWvB,KAAKQ,MAAME,cAtC1BkB,IAAMC,WCIVC,MAJf,SAAalC,GACX,OAAOwB,EAAAC,EAAAC,cAAA,WAAM1B,EAAMS,WCqBN0B,MAlBf,WACE,OACEX,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACU,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAD,CAAKrB,MAAM,SAAX,eACAQ,EAAAC,EAAAC,cAACW,EAAD,CAAKrB,MAAM,SAAX,eACAQ,EAAAC,EAAAC,cAACW,EAAD,CAAKrB,MAAM,SAAX,gBAGFQ,EAAAC,EAAAC,cAACU,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAD,CAAKrB,MAAM,SAAX,eACAQ,EAAAC,EAAAC,cAACW,EAAD,CAAKrB,MAAM,SAAX,eACAQ,EAAAC,EAAAC,cAACW,EAAD,CAAKrB,MAAM,SAAX,kBCNcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1c2ee8fd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Tabs extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const arrTabs = props.children.map(el => el.props);\r\n\r\n    this.state = {\r\n      value: arrTabs,\r\n      taba: arrTabs[0].children,\r\n      tab: arrTabs[0].title\r\n    };\r\n  }\r\n\r\n  viwer(val) {\r\n    let tab = this.state.value.find(tab => tab.title === val);\r\n    this.setState({ taba: tab.children, tab: val },\r\n    () => console.log(val, this.state.taba));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Tabs\">\r\n        <div className=\"Contenttab\">\r\n          {this.state.value.map((el, index) => {\r\n            return (\r\n              <div\r\n                className={\r\n                  this.state.value[index].title === this.state.tab\r\n                    ? \"Tab Tec\"\r\n                    : \"Tab\"\r\n                }\r\n                key={index}\r\n                onClick={() => this.viwer(this.state.value[index].title)}\r\n              >\r\n                {el.title}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"Content\">{this.state.taba}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tabs;\r\n","import React from \"react\";\r\n\r\nfunction Tab(props) {\r\n  return <div>{props.children}</div>;\r\n}\r\n\r\nexport default Tab;\r\n","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Tabs from \"./Tabs\";\nimport Tab from \"./Tab\";\n\nfunction App() {\n  return (\n    <div>\n    <Tabs>\n      <Tab title=\"Tab 1\">Some text 1</Tab>\n      <Tab title=\"Tab 2\">Some text 2</Tab>\n      <Tab title=\"Tab 3\">Some text 3</Tab>\n    </Tabs>\n\n    <Tabs>\n      <Tab title=\"Tab 1\">Some text 1</Tab>\n      <Tab title=\"Tab 2\">Some text 2</Tab>\n      <Tab title=\"Tab 3\">Some text 3</Tab>\n    </Tabs>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}